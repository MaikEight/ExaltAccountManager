<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bunifu.UI.WinForms.BunifuImageButton</name>
    </assembly>
    <members>
        <member name="T:Bunifu.UI.WinForms.BunifuImageButton">
            <summary>
            Provides button-like capabilities and image manipulation 
            features when working with images/icons.
            </summary>
        </member>
        <member name="M:Bunifu.UI.WinForms.BunifuImageButton.#ctor">
            <summary>
            Creates a new <see cref="T:Bunifu.UI.WinForms.BunifuImageButton"/> control.
            </summary>
        </member>
        <member name="T:Bunifu.UI.WinForms.BunifuImageButton.FlipOrientation">
            <summary>
            Provides flip-orientation options for images.
            </summary>
        </member>
        <member name="F:Bunifu.UI.WinForms.BunifuImageButton.FlipOrientation.Normal">
            <summary>
            Flip image to normal view.
            </summary>
        </member>
        <member name="F:Bunifu.UI.WinForms.BunifuImageButton.FlipOrientation.Horizontal">
            <summary>
            Flip image horizontally.
            </summary>
        </member>
        <member name="F:Bunifu.UI.WinForms.BunifuImageButton.FlipOrientation.Vertical">
            <summary>
            Flip image vertically.
            </summary>
        </member>
        <member name="T:Bunifu.UI.WinForms.BunifuImageButton.ImageStates">
            <summary>
            Provides the various supported image-states
            generated from the applied Image.
            </summary>
        </member>
        <member name="F:Bunifu.UI.WinForms.BunifuImageButton.ImageStates.Normal">
            <summary>
            Returns the normal image.
            </summary>
        </member>
        <member name="F:Bunifu.UI.WinForms.BunifuImageButton.ImageStates.TotallyFaded">
            <summary>
            Returns a totally blurred image.
            </summary>
        </member>
        <member name="F:Bunifu.UI.WinForms.BunifuImageButton.ImageStates.MediallyFaded">
            <summary>
            Returns a medially blurred image.
            </summary>
        </member>
        <member name="F:Bunifu.UI.WinForms.BunifuImageButton.ImageStates.PartiallyFaded">
            <summary>
            Returns a partially blurred image.
            </summary>
        </member>
        <member name="T:Bunifu.UI.WinForms.BunifuImageButton.BorderStyles">
            <summary>
            Provides a list of border-style options
            for use in Bunifu Image Buttons.
            </summary>
        </member>
        <member name="F:Bunifu.UI.WinForms.BunifuImageButton.BorderStyles.Bunifu">
            <summary>
            Specifies a less-curved edge design.
            </summary>
        </member>
        <member name="F:Bunifu.UI.WinForms.BunifuImageButton.BorderStyles.Flat">
            <summary>
            Specifies a flat edge design.
            </summary>
        </member>
        <member name="F:Bunifu.UI.WinForms.BunifuImageButton.BorderStyles.Round">
            <summary>
            Specifies a rounded design.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.AllowBuffering">
            <summary>
            When set to true, the image will be double-buffered to 
            prevent flickering. However once enabled, the property 
            <see cref="P:Bunifu.UI.WinForms.BunifuImageButton.FadeWhenInactive"/> will be set to false to 
            allow for visibility whenever zooming occurs.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.ShowCursorChanges">
            <summary>
             Gets or sets a value indicating whether the control 
             will show cursor changes during mouse-hover events.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.ShowActiveImage">
            <summary>
            Sets a value indicating whether the 'ActiveImage' 
            will be applied on mouse-hover.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.AllowZooming">
            <summary>
            Gets or sets a value indicating whether zooming is enabled.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.AllowZoomingOnFocus">
            <summary>
            Gets or sets a value indicating whether 
            the image will be zoomed-in on focus.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.AllowAnimations">
            <summary>
            Gets or sets a value indicating whether animations are enabled.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.FadeWhenInactive">
            <summary>
            Automatically fades the image when inactive.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.AllowToggling">
            <summary>
            Gets or sets a value indicating whether 
            the button will be automatically toggled 
            to receive or release focus when clicked.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.ImageMargin">
            <summary>
            Gets or sets the distance between the container and the underlying image.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.Zoom">
            <summary>
            Gets or sets the distance between the container and the underlying image.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.Rotation">
            <summary>
            Gets or sets the angle of rotation for the image.
            Please provide a value between 0 and 360.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.ZoomSpeed">
            <summary>
            Gets or sets the time in milliseconds the zooming animation takes when active.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.ToolTipText">
            <summary>
            Allows you to easily get or set some ToolTip information to 
            be displayed to the user on mouse-hovering over the control.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.Image">
            <summary>
            Gets or sets the image displayed in the image button.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.ImageActive">
            <summary>
            (This property has been deprecated as of version 1.6.0.0. Please use the property 'ActiveImage' instead.)
            Gets or sets the image to be applied whenever the image button is active or hovered onto.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.ActiveImage">
            <summary>
            Gets or sets the image to be applied whenever the image button is active or hovered onto.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.ImageSize">
            <summary>
            Gets or sets the default image size.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.ImageZoomSize">
            <summary>
            Gets or sets the maximum size of the image when hovered onto or active.
            This defaults to the standard set size of the control.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.Flip">
            <summary>
            Flips the image to any given orientation.
            Supports both Vertical and Horizontal orientation-flipping options.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.BorderOptions">
            <summary>
            Gets or sets the border options to be used in the Image Button.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.DialogResult">
            <summary>
            Gets or sets the <see cref="P:Bunifu.UI.WinForms.BunifuImageButton.DialogResult"/> returned by the Image Button.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.ShowSizeMarkers">
            <summary>
             Gets or sets a value indicating whether the size markers 
             displayed at the control's top-area will be visible during design-time.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.ShowImageBorders">
            <summary>
             Gets or sets a value indicating whether borders will 
             be viewed for the image applied during design-time.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.IsZoomedIn">
            <summary>
            Gets a value indicating whether the 
            image button is currently zoomed-in.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.IsDefault">
            <summary>
            Gets or sets a value indicating whether the 
            Image button control is the default button.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.ImageLocation">
            <summary>
            Gets or sets the path or URL for the image to display in the Image Button.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.WaitOnLoad">
            <summary>
            Gets or sets a value indicating whether an image is loaded synchronously.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.InitialImage">
            <summary>
            Gets or sets the image displayed in the Image
            Button when the main image is loading.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.ErrorImage">
            <summary>
            Gets or sets the image displayed in the Image
            Button when an error occurs during the image-loading
            process or if the image load is canceled.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BunifuImageButton.CreateParams">
            <summary>
            Overrides the CreateParams method to stop flickering issues 
            by setting the "WS_EX_COMPOSITED" (0x02000000) style.
            </summary>
        </member>
        <member name="M:Bunifu.UI.WinForms.BunifuImageButton.Refresh">
            <summary>
            Redraws the control's surface.
            </summary>
        </member>
        <member name="M:Bunifu.UI.WinForms.BunifuImageButton.NotifyDefault(System.Boolean)">
            <summary>
            Notifies the iMAGE Button whether it is the default 
            button so that it can adjust its appearance accordingly.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Bunifu.UI.WinForms.BunifuImageButton.PerformClick">
            <summary>
            Raises the control's Click event.
            </summary>
        </member>
        <member name="M:Bunifu.UI.WinForms.BunifuImageButton.ZoomIn">
            <summary>
            Zooms in the image to the preset size.
            </summary>
        </member>
        <member name="M:Bunifu.UI.WinForms.BunifuImageButton.ZoomOut">
            <summary>
            Zooms out the image to its default size.
            </summary>
        </member>
        <member name="M:Bunifu.UI.WinForms.BunifuImageButton.Rotate(System.Int32,System.Boolean,System.Int32,System.Action)">
            <summary>
            Rotates the image to a set angle of rotation.
            </summary>
            <param name="allowAnimation">
            Allow animation the rotation event? If yes, the rotation will be animated from one angle to another.
            </param>
            <param name="angle">
            The angle of rotation to apply. Please provide a value between 0 and 360.
            </param>
            <param name="animationSpeed">
            The rotating animation speed in milliseconds to apply. Default speed is 500(ms).
            </param>
            <param name="onCompleteRotation">
            Specify which action or method to execute once the rotation task is complete.
            </param>
        </member>
        <member name="M:Bunifu.UI.WinForms.BunifuImageButton.Load(System.String)">
            <summary>
            Sets the ImageLocation to the specified URL and displays the image indicated.
            </summary>
            <param name="url">The path for the image to display in the Image Button.</param>
            Exceptions:
            <exception cref="T:System.InvalidOperationException">Thrown if url is null or an empty string.</exception>
            <exception cref="T:System.Net.WebException">Thrown if url refers to an image on the Web that cannot be accessed.</exception>
            <exception cref="T:System.ArgumentException">Thrown if url refers to a file that is not an image.</exception>
            <exception cref="!:IO.FileNotFoundException">Thrown if url refers to a file that does not exist.</exception>
        </member>
        <member name="M:Bunifu.UI.WinForms.BunifuImageButton.Load">
            <summary>
            Displays the image specified by the ImageLocation property of the Image Button.
            </summary>
            Exceptions:
            <exception cref="T:System.InvalidOperationException">Thrown if ImageLocation is null or an empty string.</exception>
        </member>
        <member name="M:Bunifu.UI.WinForms.BunifuImageButton.LoadAsync">
            <summary>
            Loads the image asynchronously.
            </summary>
        </member>
        <member name="M:Bunifu.UI.WinForms.BunifuImageButton.LoadAsync(System.String)">
            <summary>
            Loads the image at the specified location, asynchronously.
            </summary>
            <param name="url">The path for the image to display in the Image Button.</param>
        </member>
        <member name="M:Bunifu.UI.WinForms.BunifuImageButton.CancelAsync">
            <summary>
            Cancels an asynchronous image load.
            </summary>
        </member>
        <member name="M:Bunifu.UI.WinForms.BunifuImageButton.Calculate">
            <summary>
            Calculates the correct image-size as per the applied state.
            </summary>
        </member>
        <member name="M:Bunifu.UI.WinForms.BunifuImageButton.Render(Bunifu.UI.WinForms.BunifuImageButton.ImageStates)">
            <summary>
            Renders the required image as per the applied state.
            </summary>
            <param name="state">The image-state-type to be used.</param>
        </member>
        <member name="M:Bunifu.UI.WinForms.BunifuImageButton.Render(System.Int32)">
            <summary>
            Renders the required image as per the applied state.
            </summary>
            <param name="state">The image-state to be used.</param>
        </member>
        <member name="M:Bunifu.UI.WinForms.BunifuImageButton.DrawCanvas(System.Drawing.Graphics,System.Drawing.Rectangle,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,Bunifu.UI.WinForms.BunifuImageButton.BorderStyles)">
            <summary>
            Draws a user-defined Graphics canvas.
            </summary>
            <param name="graphics">The Graphics canvas.</param>
            <param name="Bounds">The canvas rectangle-bounds.</param>
            <param name="radius">The canvas corner-radius.</param>
            <param name="borderThickness">The canvas border-thickness.</param>
            <param name="borderColor">The canvas border-color.</param>
            <param name="style">The canvas border-style.</param>
            <param name="backColor">Color of the fill.</param>
        </member>
        <member name="M:Bunifu.UI.WinForms.BunifuImageButton.BunifuControlActionList.ChooseImage">
            <summary>
            Select the image displayed in the PictureBox.
            </summary>
        </member>
        <member name="F:Bunifu.UI.WinForms.BunifuImageButton.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Bunifu.UI.WinForms.BunifuImageButton.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Bunifu.UI.WinForms.BunifuImageButton.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Bunifu.UI.WinForms.RotationUIEditor">
            <summary>
            Provides a standard Rotation Dropdown UI Editor.
            </summary>
        </member>
        <member name="T:Bunifu.UI.WinForms.BorderOptions">
            <summary>
            Provides a list of supported border options 
            for use with Bunifu Image Buttons.
            </summary>
        </member>
        <member name="M:Bunifu.UI.WinForms.BorderOptions.#ctor">
            <summary>
            Creates a new <see cref="T:Bunifu.UI.WinForms.BorderOptions"/> property object.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BorderOptions.BorderStyle">
            <summary>
            Gets or sets the control's border-style option.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BorderOptions.BorderRadius">
            <summary>
            Gets or sets a radius for the control's edges.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BorderOptions.BorderThickness">
            <summary>
            Gets or sets the control's edge or border-thickness.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BorderOptions.BackColor">
            <summary>
            Gets or sets the control's background color.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.BorderOptions.BorderColor">
            <summary>
            Gets or sets the control's border color.
            </summary>
        </member>
        <member name="T:Bunifu.UI.WinForms.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.Properties.Resources._default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.Properties.Resources._error">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Bunifu.UI.WinForms.Properties.Resources._initial">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="F:Utilities.BunifuImageButton.RotationEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.RotationEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Utilities.BunifuImageButton.RotationEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Utilities.BunifuImageButton.ImageExtensions">
            <summary>
            Image-rendering extensions class for Bunifu Image Button.
            </summary>
        </member>
        <member name="T:Utilities.BunifuImageButton.ImageExtensions.FlipOrientation">
            <summary>
            Provides flip-orientation options for image containers.
            </summary>
        </member>
        <member name="F:Utilities.BunifuImageButton.ImageExtensions.FlipOrientation.Normal">
            <summary>
            Flip image to normal setting.
            </summary>
        </member>
        <member name="F:Utilities.BunifuImageButton.ImageExtensions.FlipOrientation.Horizontal">
            <summary>
            Flip image horizontally.
            </summary>
        </member>
        <member name="F:Utilities.BunifuImageButton.ImageExtensions.FlipOrientation.Vertical">
            <summary>
            Flip image vertically.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.ImageExtensions.Rotate(System.Drawing.Graphics,System.Double,System.Int32,System.Int32)">
            <summary>
            Rotates an image container to a specified angle or degree.
            </summary>
            <param name="graphics">The graphics object to be used.</param>
            <param name="rotation">The angle of rotation.</param>
            <param name="width">The final width of the image.</param>
            <param name="height">The final height of the image.</param>
        </member>
        <member name="M:Utilities.BunifuImageButton.ImageExtensions.Flip(System.Drawing.Graphics,Utilities.BunifuImageButton.ImageExtensions.FlipOrientation,System.Int32,System.Int32)">
            <summary>
            Flips an image container to a specified position.
            </summary>
            <param name="graphics">The graphics object to be used.</param>
            <param name="flip">The flip orientation.</param>
            <param name="width">The final width of the image.</param>
            <param name="height">The final height of the image.</param>
        </member>
        <member name="M:Utilities.BunifuImageButton.ImageExtensions.Flip(System.Drawing.Image,Utilities.BunifuImageButton.ImageExtensions.FlipOrientation)">
            <summary>
            Flips an image container to a specified position.
            </summary>
            <param name="graphics">The graphics object to be used.</param>
            <param name="flip">The flip orientation.</param>
        </member>
        <member name="M:Utilities.BunifuImageButton.ImageExtensions.ToRotateFlip(Utilities.BunifuImageButton.ImageExtensions.FlipOrientation)">
            <summary>
            Flips an image container to a specified position without an angle of rotation.
            </summary>
            <param name="flip">The flip orientation.</param>
        </member>
        <member name="T:Utilities.BunifuImageButton.Transitions.IManagedType">
            <summary>
            Interface for all types we can perform transitions on. 
            Each type (e.g. int, double, Color) that we can perform a transition on 
            needs to have its own class that implements this interface. These classes 
            tell the transition system how to act on objects of that type.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.IManagedType.getManagedType">
            <summary>
            Returns the Type that the instance is managing.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.IManagedType.copy(System.Object)">
            <summary>
            Returns a deep copy of the object passed in. (In particular this is 
            needed for types that are objects.)
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.IManagedType.getIntermediateValue(System.Object,System.Object,System.Double)">
            <summary>
            Returns an object holding the value between the start and end corresponding
            to the percentage passed in. (Note: the percentage can be less than 0% or
            greater than 100%.)
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.ITransitionType.onTimer(System.Int32,System.Double@,System.Boolean@)">
            <summary>
            Called by the Transition framework when its timer ticks to pass in the
            time (in ms) since the transition started. 
            
            You should return (in an out parameter) the percentage movement towards 
            the destination value for the time passed in. Note: this does not need to
            be a smooth transition from 0% to 100%. You can overshoot with values
            greater than 100% or undershoot if you need to (for example, to have some
            form of "elasticity").
            
            The percentage should be returned as (for example) 0.1 for 10%.
            
            You should return (in an out parameter) whether the transition has completed.
            (This may not be at the same time as the percentage has moved to 100%.)
            </summary>
        </member>
        <member name="T:Utilities.BunifuImageButton.Transitions.ManagedType_Color">
            <summary>
            Class that manages transitions for Color properties. For these we
            need to transition the R, G, B and A sub-properties independently.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.ManagedType_Color.getManagedType">
            <summary>
            Returns the type we are managing.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.ManagedType_Color.copy(System.Object)">
            <summary>
            Returns a copy of the color object passed in.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.ManagedType_Color.getIntermediateValue(System.Object,System.Object,System.Double)">
            <summary>
            Creates an intermediate value for the colors depending on the percentage passed in.
            </summary>
        </member>
        <member name="T:Utilities.BunifuImageButton.Transitions.ManagedType_Double">
            <summary>
            Manages transitions for double properties.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.ManagedType_Double.getManagedType">
            <summary>
             Returns the type managed by this class.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.ManagedType_Double.copy(System.Object)">
            <summary>
            Returns a copy of the double passed in.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.ManagedType_Double.getIntermediateValue(System.Object,System.Object,System.Double)">
            <summary>
            Returns the value between start and end for the percentage passed in.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.ManagedType_Float.getManagedType">
            <summary>
            Returns the type we're managing.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.ManagedType_Float.copy(System.Object)">
            <summary>
            Returns a copy of the float passed in.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.ManagedType_Float.getIntermediateValue(System.Object,System.Object,System.Double)">
            <summary>
            Returns the interpolated value for the percentage passed in.
            </summary>
        </member>
        <member name="T:Utilities.BunifuImageButton.Transitions.ManagedType_Int">
            <summary>
            Manages transitions for int properties.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.ManagedType_Int.getManagedType">
            <summary>
            Returns the type we are managing.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.ManagedType_Int.copy(System.Object)">
            <summary>
            Returns a copy of the int passed in.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.ManagedType_Int.getIntermediateValue(System.Object,System.Object,System.Double)">
            <summary>
            Returns the value between the start and end for the percentage passed in.
            </summary>
        </member>
        <member name="T:Utilities.BunifuImageButton.Transitions.ManagedType_String">
            <summary>
            Manages transitions for strings. This doesn't make as much sense as transitions
            on other types, but I like the way it looks!
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.ManagedType_String.getManagedType">
            <summary>
            Returns the type we're managing.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.ManagedType_String.copy(System.Object)">
            <summary>
            Returns a copy of the string passed in.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.ManagedType_String.getIntermediateValue(System.Object,System.Object,System.Double)">
            <summary>
            Returns an "interpolated" string.
            </summary>
        </member>
        <member name="T:Utilities.BunifuImageButton.Transitions.Transition">
            <summary>
            Lets you perform animated transitions of properties on arbitrary objects. These 
            will often be transitions of UI properties, for example an animated fade-in of 
            a UI object, or an animated move of a UI object from one position to another.
            
            Each transition can simulataneously change multiple properties, including properties
            across multiple objects.
            
            Example transition
            ------------------
            a.      Transition t = new Transition(new TransitionMethod_Linear(500));
            b.      t.add(form1, "Width", 500);
            c.      t.add(form1, "BackColor", Color.Red);
            d.      t.run();
              
            Line a:         Creates a new transition. You specify the transition method.
                            
            Lines b. and c: Set the destination values of the properties you are animating.
            
            Line d:         Starts the transition.
            
            Transition methods
            ------------------
            TransitionMethod objects specify how the transition is made. Examples include
            linear transition, ease-in-ease-out and so on. Different transition methods may
            need different parameters.
            
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.Transition.#cctor">
            <summary>
            You should register all managed-types here.
            </summary>
        </member>
        <member name="T:Utilities.BunifuImageButton.Transitions.Transition.Args">
            <summary>
            Args passed with the TransitionCompletedEvent.
            </summary>
        </member>
        <member name="E:Utilities.BunifuImageButton.Transitions.Transition.TransitionCompletedEvent">
            <summary>
            Event raised when the transition hass completed.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.Transition.run(System.Object,System.String,System.Object,Utilities.BunifuImageButton.Transitions.ITransitionType)">
            <summary>
            Creates and immediately runs a transition on the property passed in.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.Transition.run(System.Object,System.String,System.Object,System.Object,Utilities.BunifuImageButton.Transitions.ITransitionType)">
            <summary>
            Sets the property passed in to the initial value passed in, then creates and 
            immediately runs a transition on it.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.Transition.runChain(Utilities.BunifuImageButton.Transitions.Transition[])">
            <summary>
            Creates a TransitionChain and runs it.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.Transition.#ctor(Utilities.BunifuImageButton.Transitions.ITransitionType)">
            <summary>
            Constructor. You pass in the object that holds the properties 
            that you are performing transitions on.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.Transition.add(System.Object,System.String,System.Object)">
            <summary>
            Adds a property that should be animated as part of this transition.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.Transition.run">
            <summary>
            Starts the transition.
            </summary>
        </member>
        <member name="P:Utilities.BunifuImageButton.Transitions.Transition.TransitionedProperties">
            <summary>
            Property that returns a list of information about each property managed
            by this transition.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.Transition.removeProperty(Utilities.BunifuImageButton.Transitions.Transition.TransitionedPropertyInfo)">
            <summary>
            We remove the property with the info passed in from the transition.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.Transition.onTimer">
            <summary>
            Called when the transition timer ticks.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.Transition.setProperty(System.Object,Utilities.BunifuImageButton.Transitions.Transition.PropertyUpdateArgs)">
            <summary>
            Sets a property on the object passed in to the value passed in. This method
            invokes itself on the GUI thread if the property is being invoked on a GUI 
            object.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.Transition.isDisposed(System.Object)">
            <summary>
            Returns true if the object passed in is a Control and is disposed
            or in the process of disposing. (If this is the case, we don't want
            to make any changes to its properties.)
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.Transition.registerType(Utilities.BunifuImageButton.Transitions.IManagedType)">
            <summary>
            Registers a transition-type. We hold them in a map.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionChain.runNextTransition">
            <summary>
            Runs the next transition in the list.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionChain.onTransitionCompleted(System.Object,Utilities.BunifuImageButton.Transitions.Transition.Args)">
            <summary>
            Called when the transition we have just run has completed.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionElement.#ctor(System.Double,System.Double,Utilities.BunifuImageButton.Transitions.InterpolationMethod)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Utilities.BunifuImageButton.Transitions.TransitionElement.EndTime">
            <summary>
            The percentage of elapsed time, expressed as (for example) 75 for 75%.
            </summary>
        </member>
        <member name="P:Utilities.BunifuImageButton.Transitions.TransitionElement.EndValue">
            <summary>
            The value of the animated properties at the EndTime. This is the percentage 
            movement of the properties between their start and end values. This should
            be expressed as (for example) 75 for 75%.
            </summary>
        </member>
        <member name="P:Utilities.BunifuImageButton.Transitions.TransitionElement.InterpolationMethod">
            <summary>
            The interpolation method to use when moving between the previous value
            and the current one.
            </summary>
        </member>
        <member name="T:Utilities.BunifuImageButton.Transitions.TransitionManager">
            <summary>
            This class is responsible for running transitions. It holds the timer that
            triggers transaction animation. 
            </summary><remarks>
            This class is a singleton.
            
            We manage the transaction timer here so that we can have a single timer
            across all transactions. If each transaction has its own timer, this creates
            one thread for each transaction, and this can lead to too many threads in
            an application.
            
            This class essentially just manages the timer for the transitions. It calls 
            back into the running transitions, which do the actual work of the transition.
            
            </remarks>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionManager.getInstance">
            <summary>
            Singleton's getInstance method.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionManager.register(Utilities.BunifuImageButton.Transitions.Transition)">
            <summary>
            You register a transition with the manager here. This will start to run
            the transition as the manager's timer ticks.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionManager.removeDuplicates(Utilities.BunifuImageButton.Transitions.Transition)">
            <summary>
            Checks if any existing transitions are acting on the same properties as the
            transition passed in. If so, we remove the duplicated properties from the 
            older transitions.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionManager.removeDuplicates(Utilities.BunifuImageButton.Transitions.Transition,Utilities.BunifuImageButton.Transitions.Transition)">
            <summary>
            Finds any properties in the old-transition that are also in the new one,
            and removes them from the old one.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionManager.#ctor">
            <summary>
            Private constructor (for singleton).
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionManager.onTimerElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Called when the timer ticks.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionManager.onTransitionCompleted(System.Object,Utilities.BunifuImageButton.Transitions.Transition.Args)">
            <summary>
            Called when a transition has completed. 
            </summary>
        </member>
        <member name="T:Utilities.BunifuImageButton.Transitions.TransitionType_Acceleration">
            <summary>
            Manages transitions under constant acceleration from a standing start.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionType_Acceleration.#ctor(System.Int32)">
            <summary>
            Constructor. You pass in the time that the transition 
            will take (in milliseconds).
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionType_Acceleration.onTimer(System.Int32,System.Double@,System.Boolean@)">
            <summary>
            Works out the percentage completed given the time passed in.
            This uses the formula:
              s = ut + 1/2at^2
            The initial velocity is 0, and the acceleration to get to 1.0
            at t=1.0 is 2, so the formula just becomes:
              s = t^2
            </summary>
        </member>
        <member name="T:Utilities.BunifuImageButton.Transitions.TransitionType_Bounce">
            <summary>
            This transition bounces the property to a destination value and back to the
            original value. It is accelerated to the destination and then decelerated back
            as if being dropped with gravity and bouncing back against gravity.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionType_Bounce.#ctor(System.Int32)">
            <summary>
            Constructor. You pass in the total time taken for the bounce.
            </summary>
        </member>
        <member name="T:Utilities.BunifuImageButton.Transitions.TransitionType_CriticalDamping">
            <summary>
            This transition animates with an exponential decay. This has a damping effect
            similar to the motion of a needle on an electomagnetically controlled dial.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionType_CriticalDamping.#ctor(System.Int32)">
            <summary>
            Constructor. You pass in the time that the transition 
            will take (in milliseconds).
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionType_CriticalDamping.onTimer(System.Int32,System.Double@,System.Boolean@)">
            <summary>
            </summary>
        </member>
        <member name="T:Utilities.BunifuImageButton.Transitions.TransitionType_Deceleration">
            <summary>
            Manages a transition starting from a high speed and decelerating to zero by
            the end of the transition.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionType_Deceleration.#ctor(System.Int32)">
            <summary>
            Constructor. You pass in the time that the transition 
            will take (in milliseconds).
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionType_Deceleration.onTimer(System.Int32,System.Double@,System.Boolean@)">
            <summary>
            Works out the percentage completed given the time passed in.
            This uses the formula:
              s = ut + 1/2at^2
            The initial velocity is 2, and the acceleration to get to 1.0
            at t=1.0 is -2, so the formula becomes:
              s = t(2-t)
            </summary>
        </member>
        <member name="T:Utilities.BunifuImageButton.Transitions.TransitionType_EaseInEaseOut">
            <summary>
            Manages an ease-in-ease-out transition. This accelerates during the first 
            half of the transition, and then decelerates during the second half.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionType_EaseInEaseOut.#ctor(System.Int32)">
            <summary>
            Constructor. You pass in the time that the transition 
            will take (in milliseconds).
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionType_EaseInEaseOut.onTimer(System.Int32,System.Double@,System.Boolean@)">
            <summary>
            Works out the percentage completed given the time passed in.
            This uses the formula:
              s = ut + 1/2at^2
            We accelerate as at the rate needed (a=4) to get to 0.5 at t=0.5, and
            then decelerate at the same rate to end up at 1.0 at t=1.0.
            </summary>
        </member>
        <member name="T:Utilities.BunifuImageButton.Transitions.TransitionType_Flash">
            <summary>
            This transition type 'flashes' the properties a specified number of times, ending
            up by reverting them to their initial values. You specify the number of bounces and
            the length of each bounce. 
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionType_Flash.#ctor(System.Int32,System.Int32)">
            <summary>
            You specify the number of bounces and the time taken for each bounce.
            </summary>
        </member>
        <member name="T:Utilities.BunifuImageButton.Transitions.TransitionType_Linear">
            <summary>
            This class manages a linear transition. The percentage complete for the transition
            increases linearly with time.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionType_Linear.#ctor(System.Int32)">
            <summary>
            Constructor. You pass in the time (in milliseconds) that the
            transition will take.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionType_Linear.onTimer(System.Int32,System.Double@,System.Boolean@)">
            <summary>
            We return the percentage completed.
            </summary>
        </member>
        <member name="T:Utilities.BunifuImageButton.Transitions.TransitionType_ThrowAndCatch">
            <summary>
            This transition bounces the property to a destination value and back to the
            original value. It is decelerated to the destination and then acclerated back
            as if being thrown against gravity and then descending back with gravity.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionType_ThrowAndCatch.#ctor(System.Int32)">
            <summary>
            Constructor. You pass in the total time taken for the bounce.
            </summary>
        </member>
        <member name="T:Utilities.BunifuImageButton.Transitions.TransitionType_UserDefined">
            <summary>
            This class allows you to create user-defined transition types. You specify these
            as a list of TransitionElements. Each of these defines: 
            End time , End value, Interpolation method
            
            For example, say you want to make a bouncing effect with a decay:
            
            EndTime%    EndValue%   Interpolation
            --------    ---------   -------------
            50          100         Acceleration 
            75          50          Deceleration
            85          100         Acceleration
            91          75          Deceleration
            95          100         Acceleration
            98          90          Deceleration
            100         100         Acceleration
            
            The time values are expressed as a percentage of the overall transition time. This 
            means that you can create a user-defined transition-type and then use it for transitions
            of different lengths.
            
            The values are percentages of the values between the start and end values of the properties
            being animated in the transitions. 0% is the start value and 100% is the end value.
            
            The interpolation is one of the values from the InterpolationMethod enum.
            
            So the example above accelerates to the destination (as if under gravity) by
            t=50%, then bounces back up to half the initial height by t=75%, slowing down 
            (as if against gravity) before falling down again and bouncing to decreasing 
            heights each time.
            
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionType_UserDefined.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionType_UserDefined.#ctor(System.Collections.Generic.IList{Utilities.BunifuImageButton.Transitions.TransitionElement},System.Int32)">
            <summary>
            Constructor. You pass in the list of TransitionElements and the total time
            (in milliseconds) for the transition.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionType_UserDefined.setup(System.Collections.Generic.IList{Utilities.BunifuImageButton.Transitions.TransitionElement},System.Int32)">
            <summary>
            Sets up the transitions. 
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionType_UserDefined.onTimer(System.Int32,System.Double@,System.Boolean@)">
            <summary>
            Called to find the value for the movement of properties for the time passed in.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.TransitionType_UserDefined.getElementInfo(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,Utilities.BunifuImageButton.Transitions.InterpolationMethod@)">
            <summary>
            Returns the element info for the time-fraction passed in. 
            </summary>
        </member>
        <member name="T:Utilities.BunifuImageButton.Transitions.Utility">
            <summary>
            A class holding static utility functions.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.Utility.getValue(System.Object,System.String)">
            <summary>
            Returns the value of the property passed in.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.Utility.setValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of the property passed in.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.Utility.interpolate(System.Double,System.Double,System.Double)">
            <summary>
            Returns a value between d1 and d2 for the percentage passed in.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.Utility.interpolate(System.Int32,System.Int32,System.Double)">
            <summary>
            Returns a value betweeen i1 and i2 for the percentage passed in.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.Utility.interpolate(System.Single,System.Single,System.Double)">
            <summary>
            Returns a value betweeen f1 and f2 for the percentage passed in.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.Utility.convertLinearToEaseInEaseOut(System.Double)">
            <summary>
            Converts a fraction representing linear time to a fraction representing
            the distance traveled under an ease-in-ease-out transition.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.Utility.convertLinearToAcceleration(System.Double)">
            <summary>
            Converts a fraction representing linear time to a fraction representing
            the distance traveled under a constant acceleration transition.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.Utility.convertLinearToDeceleration(System.Double)">
            <summary>
            Converts a fraction representing linear time to a fraction representing
            the distance traveled under a constant deceleration transition.
            </summary>
        </member>
        <member name="M:Utilities.BunifuImageButton.Transitions.Utility.raiseEvent``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Fires the event passed in in a thread-safe way. 
            </summary><remarks>
            This method loops through the targets of the event and invokes each in turn. If the
            target supports ISychronizeInvoke (such as forms or controls) and is set to run 
            on a different thread, then we call BeginInvoke to marshal the event to the target
            thread. If the target does not support this interface (such as most non-form classes)
            or we are on the same thread as the target, then the event is fired on the same
            thread as this is called from.
            </remarks>
        </member>
    </members>
</doc>
